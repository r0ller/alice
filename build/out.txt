{"analyses":[{"morphology":[{"morpheme id":"1","word":"file","stem":"file","gcat":"N","tags":["file[stem]","N","Sg","swConsonant"]},{"morpheme id":"2","word":"abc","stem":"abc","gcat":"CON"},{"morpheme id":"3","word":"is","stem":"be","gcat":"V","tags":["be[stem]","V","Sg"]},{"morpheme id":"4","word":"executable","stem":"executable","gcat":"A","tags":["executable[stem]","A"]},{"morpheme id":"5","word":".","stem":".","gcat":"Punct","tags":[".[stem]","Punct","FullStop"]}],"syntax":[{"symbol":"S","left child":{"symbol":"ENG_VP","left child":{"symbol":"ENG_Vbar5","left child":{"symbol":"ENG_V","left child":{},"right child":{"symbol":"ENG_V_Stem","morpheme id":"3"}},"right child":{"symbol":"ENG_N_Sg","left child":{"symbol":"ENG_N_Sg_0Con_swC","left child":{"symbol":"ENG_N_Sg_0Con","left child":{"symbol":"ENG_N_Stem","morpheme id":"1"},"right child":{"symbol":"ENG_N_lfea_Sg"}},"right child":{"symbol":"ENG_lfea_swConsonant"}},"right child":{"symbol":"ENG_1Con","left child":{},"right child":{"symbol":"ENG_Con","morpheme id":"2"}}}},"right child":{"symbol":"ENG_AP","left child":{},"right child":{"symbol":"ENG_Abar1","left child":{},"right child":{"symbol":"ENG_A0NEG","left child":{},"right child":{"symbol":"ENG_A","left child":{},"right child":{"symbol":"ENG_A_Stem","morpheme id":"4"}}}}}},"right child":{"symbol":"ENG_Punct","left child":{"symbol":"ENG_Punct_Stem","morpheme id":"5"},"right child":{"symbol":"ENG_Punct_FullStop"}}}],"semantics":[{"id":"9","functor":"BEENGV","d_key":"1","morpheme id":"3","tags":{"mood":"indicative"},"functor id":"BEENGV_1","dependencies":[{"id":"9_1","functor":"PROPERTIES","d_key":"1","tags":{"mood":"indicative"},"functor id":"PROPERTIES_1","dependencies":[{"id":"9_2","functor":"FILEBEPROP","d_key":"1","tags":{"mood":"indicative"},"functor id":"FILEBEPROP_1","dependencies":[{"id":"12","functor":"EXECUTABLEENGA","d_key":"1","morpheme id":"4","tags":{"mood":"indicative"},"functor id":"EXECUTABLEENGA_1"},{"id":"1","functor":"FILEENGN","d_key":"1","morpheme id":"1","tags":{"mood":"indicative"},"functor id":"FILEENGN_1","dependencies":[{"id":"1_3","functor":"BEENGV","d_key":"1","tags":{"mood":"indicative"},"functor id":"BEENGV_1","dependencies":[{"id":"1_4","functor":"PROPERTIES","d_key":"1","tags":{"mood":"indicative"},"functor id":"PROPERTIES_1","dependencies":[{"id":"1_5","functor":"FILEBEPROP","d_key":"1","tags":{"mood":"indicative"},"functor id":"FILEBEPROP_1","dependencies":[{"id":"1_6","functor":"FILEENGN","d_key":"1","tags":{"mood":"indicative"},"functor id":"FILEENGN_1","dependencies":[{"id":"6","functor":"CON","d_key":"1","morpheme id":"2"}]}]}]}]}]}]}]}]}],"functors":[{"functor id":"BEENGV_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;c=1;for i in $2;do p=$(($c+2));eval v=\"\\$$p\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in PROPERTIES_*_out) if [ -n \"$out\" ];then out=\"$(echo \"$v\"|sed \"s/|/$out/g\")\";else out=\"$v\";fi;break; ;;*_out) out=\"$out\"\"$v\"; ;;esac;c=$(($c+1));done;eval \"$1\"_out='\"$out\"';elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"},{"functor id":"EXECUTABLEENGA_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;eval \"$1\"_out=\"executable\";elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"},{"functor id":"FILEBEPROP_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;ordered_args=$(echo $2|tr \" \" \"\\n\"|sort -t \"_\" -k 3,3n -k 4,4n);c=1;for i in $ordered_args;do eval v=\"\\$$i\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in *_out) option=\"$v\";if [ -z \"$out\" ];then out=\"$option\";else out=\"$out&$option\";fi; ;;*_morphology) option=\"$v\";if [ -z \"$out\" ];then out=\"$option\";else out=\"$out<$option\";fi; ;;esac;c=$(($c+1));done;eval \"$1\"_out='\"$out\"';elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"},{"functor id":"FILEENGN_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;c=1;for i in $2;do p=$(($c+2));eval v=\"\\$$p\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in *_out) if [ -n \"$(echo \"$v\"|grep '\"gcat\":\"CON\"')\" ];then out=\"$out\"\"$(echo \"$v\"|cut -f3 -d:|cut -f1 -d,)\";else out=\"$v\";fi; ;;esac;c=$(($c+1));done;eval \"$1\"_out='\"$out\"';elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"},{"functor id":"PROPERTIES_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;unset head;unset head1;unset head2;head2pos=0;unset options;unset savepos;unset head2passed;listsize=0;optionlist=\"optionlist\";rellistsize=0;reloptionlist=\"reloptionlist\";ordered_args=$(echo $2|tr \" \" \"\\n\"|sort -t \"_\" -k 3,3n -k 4,4n);c=1;for i in $ordered_args;do eval v=\"\\$$i\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in *_out) op=\"$(echo \"$v\"|cut -c1)\";if [ \"$op\" != \"&\" -a \"$op\" != \"\\\"\" -a \"$op\" != \"|\" ];then if [ -z \"$head1\" ];then if [ -n \"$(echo \"$v\"|grep \"<\")\" ];then head1=\"$(echo \"$v\"|cut -f1 -d\"<\"|tr \"&\" \".\")\";else head1=\"$(echo \"$v\"|tr \"&\" \".\")\";fi;head2=\"$(echo \"$v\"|cut -f2 -d\"<\")\";if [ -n \"$head2\" -a \"$head2\" != \"$v\"  ];then op=\"$(echo \"$head2\"|cut -c1)\";if [ \"$op\" != \"&\" -a \"$op\" != \"\\\"\" -a \"$op\" != \"|\" ];then head2=\"$(echo \"$head2\"|tr \"&\" \".\")\";else head2=\"$(echo \"$head2\"|cut -c2-|tr \"&\" \".\")\";fi;head2pos=\"$(echo \"$i\"|cut -f3 -d\"_\")\";else unset head2;fi;elif [ -n \"$head1\" -a -z \"$head2\" -a -z \"$(echo \"$v\"|grep \"<\")\" ];then head2=\"$(echo \"$v\"|tr \"&\" \".\")\";head2pos=\"$(echo \"$i\"|cut -f3 -d\"_\")\";elif [ -n \"$head1\" -a -n \"$head2\" ];then head2=\"$head2\"\".\"\"$(echo \"$v\"|tr \"&\" \".\")\";fi;fi; ;;esac;c=$(($c+1));done;options=\"$(echo \"$head1\"|tr \"&\" \".\")\";c=1;for i in $ordered_args;do eval v=\"\\$$i\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in *_out) op=\"$(echo \"$v\"|cut -c1)\";pos=\"$(echo \"$i\"|cut -f3 -d\"_\")\";if [ \"$op\" = \"&\" ];then options=\"$options\"\"$(echo \"$v\"|tr \"&\" \".\")\";savepos=\"$pos\";elif [ \"$op\" = \"|\" -a -z \"$head2\" ];then eval ${optionlist}${listsize}=\"\\\"$options\\\"\";options=\"$(echo $v|cut -c2-)\";listsize=$(($listsize+1));savepos=\"$pos\";elif [ \"$op\" = \"|\" -a -n \"$head2\" -a \"$pos\" -lt \"$head2pos\" ];then eval ${optionlist}${listsize}=\"\\\"$options\\\"\";options=\"$(echo $v|cut -c2-)\";listsize=$(($listsize+1));savepos=\"$pos\";elif [ \"$op\" = \"|\" -a -n \"$head2\" -a \"$pos\" -ge \"$head2pos\" ];then if [ \"$savepos\" -ge \"$head2pos\" ];then eval ${reloptionlist}${rellistsize}=\"\\\"$options\\\"\";options=\"$(echo $v|cut -c2-)\";rellistsize=$(($rellistsize+1));savepos=\"$pos\";else eval ${optionlist}${listsize}=\"\\\"$options\\\"\";options=\"$(echo $v|cut -c2-)\";listsize=$(($listsize+1));savepos=\"$pos\";fi;elif [ \"$op\" = \"\\\"\" ];then options=\"$options\"\".\"\"$(echo \"$v\"|tr \"&\" \".\")\";savepos=\"$pos\";elif [ -n \"$options\" -a -n \"$head2\" ];then if [ -z \"$head2passed\" ];then eval ${optionlist}${listsize}=\"\\\"$options\\\"\";listsize=$(($listsize+1));fi;options=\"$(echo \"$head2\"|tr \"&\" \".\")\";head2passed=true;savepos=\"$pos\";elif [ -n \"$options\" -a -z \"$head2\" -a \"$listsize\" -eq 0  ];then options=\"$options\"\".\"\"$(echo \"$v\"|tr -d \"<\"|tr \"&\" \".\")\";savepos=\"$pos\";elif [ -z \"$head1\" ];then options=\"$options\"\"$(echo \"$v\"|tr \"&\" \".\")\";fi; ;;esac;c=$(($c+1));done;if [ -n \"$options\" -a -z \"$head2\" ];then echo \"options:\";echo \"$options\";eval ${optionlist}${listsize}='\"$options\"';listsize=$(($listsize+1));elif [ -n \"$options\" -a \"$savepos\" -lt \"$head2pos\" ];then echo \"options:\";echo \"$options\";eval ${optionlist}${listsize}='\"$options\"';listsize=$(($listsize+1));elif [ -n \"$options\" -a \"$savepos\" -ge \"$head2pos\" ];then echo \"options:\";echo \"$options\";eval ${reloptionlist}${rellistsize}='\"$options\"';rellistsize=$(($rellistsize+1));fi;echo \"optionlist:\";if [ \"$listsize\" -eq 0 ];then eval ${optionlist}${listsize}=\"\";listsize=$(($listsize+1));fi;if [ \"$rellistsize\" -eq 0 ];then eval ${reloptionlist}${rellistsize}=\"\";rellistsize=$(($rellistsize+1));fi;unset paths;for r in $(seq 0 $(($rellistsize-1)));do echo \"reloptionlist item:\" \"$(eval echo \\$$reloptionlist${r})\";head=$(eval echo \\$$reloptionlist${r});for i in $(seq 0 $(($listsize-1)));do echo \"optionlist item:\" \"$head\"\".\"\"$(eval echo \\$$optionlist${i})\";args=$(echo \"$head\"\".\"\"$(eval echo \\$$optionlist${i})\");args=$(echo \"$args\"|sed \"s/\\\"\\\"/\\/\\//g\"|tr \".\" \"\\n\"|sort|uniq|xargs);echo \"xargs:\" \"$args\";unset options;unset paths;for j in $args;do echo $j;if [ \"$j\" = \"executable\" ];then options=\"$options\"\"&-perm -111\";elif [ \"$j\" = \"-executable\" ];then options=\"$options\"\"&! -perm -111\";elif [ \"$j\" = \"empty\" ];then options=\"$options\"\"&-empty\";elif [ \"$j\" = \"-empty\" ];then options=\"$options\"\"&! -empty\";elif [ \"$j\" = \"symlinked\" ];then options=\"&-L\"\"$options\";elif [ \"$j\" = \"-symlinked\" ];then options=\"&! -L\"\"$options\";else paths=\"$paths\"\"&-path \"\"\\\"\"$(echo \"$j\"|sed \"s/\\/\\//\\\" -path \\\"/g\")\"\\\"\";fi;done;if [ -n \"$paths\" ];then options=\"$paths\"\"$options\";fi;out=\"$out\"\"|\"\"$options\";done;done;eval \"$1\"_out='\"$out\"';elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"}]},{"morphology":[{"morpheme id":"1","word":"file","stem":"file","gcat":"N","tags":["file[stem]","N","Sg","swConsonant"]},{"morpheme id":"2","word":"def","stem":"def","gcat":"CON"},{"morpheme id":"3","word":"is","stem":"be","gcat":"V","tags":["be[stem]","V","Sg"]},{"morpheme id":"4","word":"executable","stem":"executable","gcat":"A","tags":["executable[stem]","A"]},{"morpheme id":"5","word":".","stem":".","gcat":"Punct","tags":[".[stem]","Punct","FullStop"]}],"syntax":[{"symbol":"S","left child":{"symbol":"ENG_VP","left child":{"symbol":"ENG_Vbar5","left child":{"symbol":"ENG_V","left child":{},"right child":{"symbol":"ENG_V_Stem","morpheme id":"3"}},"right child":{"symbol":"ENG_N_Sg","left child":{"symbol":"ENG_N_Sg_0Con_swC","left child":{"symbol":"ENG_N_Sg_0Con","left child":{"symbol":"ENG_N_Stem","morpheme id":"1"},"right child":{"symbol":"ENG_N_lfea_Sg"}},"right child":{"symbol":"ENG_lfea_swConsonant"}},"right child":{"symbol":"ENG_1Con","left child":{},"right child":{"symbol":"ENG_Con","morpheme id":"2"}}}},"right child":{"symbol":"ENG_AP","left child":{},"right child":{"symbol":"ENG_Abar1","left child":{},"right child":{"symbol":"ENG_A0NEG","left child":{},"right child":{"symbol":"ENG_A","left child":{},"right child":{"symbol":"ENG_A_Stem","morpheme id":"4"}}}}}},"right child":{"symbol":"ENG_Punct","left child":{"symbol":"ENG_Punct_Stem","morpheme id":"5"},"right child":{"symbol":"ENG_Punct_FullStop"}}}],"semantics":[{"id":"9","functor":"BEENGV","d_key":"1","morpheme id":"3","tags":{"mood":"indicative"},"functor id":"BEENGV_1","dependencies":[{"id":"9_1","functor":"PROPERTIES","d_key":"1","tags":{"mood":"indicative"},"functor id":"PROPERTIES_1","dependencies":[{"id":"9_2","functor":"FILEBEPROP","d_key":"1","tags":{"mood":"indicative"},"functor id":"FILEBEPROP_1","dependencies":[{"id":"12","functor":"EXECUTABLEENGA","d_key":"1","morpheme id":"4","tags":{"mood":"indicative"},"functor id":"EXECUTABLEENGA_1"},{"id":"1","functor":"FILEENGN","d_key":"1","morpheme id":"1","tags":{"mood":"indicative"},"functor id":"FILEENGN_1","dependencies":[{"id":"1_3","functor":"BEENGV","d_key":"1","tags":{"mood":"indicative"},"functor id":"BEENGV_1","dependencies":[{"id":"1_4","functor":"PROPERTIES","d_key":"1","tags":{"mood":"indicative"},"functor id":"PROPERTIES_1","dependencies":[{"id":"1_5","functor":"FILEBEPROP","d_key":"1","tags":{"mood":"indicative"},"functor id":"FILEBEPROP_1","dependencies":[{"id":"1_6","functor":"FILEENGN","d_key":"1","tags":{"mood":"indicative"},"functor id":"FILEENGN_1","dependencies":[{"id":"6","functor":"CON","d_key":"1","morpheme id":"2"}]}]}]}]}]}]}]}]}],"functors":[{"functor id":"BEENGV_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;c=1;for i in $2;do p=$(($c+2));eval v=\"\\$$p\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in PROPERTIES_*_out) if [ -n \"$out\" ];then out=\"$(echo \"$v\"|sed \"s/|/$out/g\")\";else out=\"$v\";fi;break; ;;*_out) out=\"$out\"\"$v\"; ;;esac;c=$(($c+1));done;eval \"$1\"_out='\"$out\"';elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"},{"functor id":"EXECUTABLEENGA_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;eval \"$1\"_out=\"executable\";elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"},{"functor id":"FILEBEPROP_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;ordered_args=$(echo $2|tr \" \" \"\\n\"|sort -t \"_\" -k 3,3n -k 4,4n);c=1;for i in $ordered_args;do eval v=\"\\$$i\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in *_out) option=\"$v\";if [ -z \"$out\" ];then out=\"$option\";else out=\"$out&$option\";fi; ;;*_morphology) option=\"$v\";if [ -z \"$out\" ];then out=\"$option\";else out=\"$out<$option\";fi; ;;esac;c=$(($c+1));done;eval \"$1\"_out='\"$out\"';elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"},{"functor id":"FILEENGN_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;c=1;for i in $2;do p=$(($c+2));eval v=\"\\$$p\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in *_out) if [ -n \"$(echo \"$v\"|grep '\"gcat\":\"CON\"')\" ];then out=\"$out\"\"$(echo \"$v\"|cut -f3 -d:|cut -f1 -d,)\";else out=\"$v\";fi; ;;esac;c=$(($c+1));done;eval \"$1\"_out='\"$out\"';elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"},{"functor id":"PROPERTIES_1","definition":"echo \"printing parameters and their contents for\" $1;unset out;c=1;mood=\"\";for i in $2;do p=$(($c+2));eval v=\"\\$$p\";case \"$i\" in *_tags) if [ -n \"$(echo \"$v\"|grep 'mood:interrogative')\" ]; then mood=\"interrogative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:indicative')\" ]; then mood=\"indicative\"; elif [ -n \"$(echo \"$v\"|grep 'mood:imperative')\" ]; then mood=\"imperative\"; else echo \"error\"; fi; ;;esac;c=$(($c+1));done;if [ $mood = \"imperative\" ]; then echo $mood;unset head;unset head1;unset head2;head2pos=0;unset options;unset savepos;unset head2passed;listsize=0;optionlist=\"optionlist\";rellistsize=0;reloptionlist=\"reloptionlist\";ordered_args=$(echo $2|tr \" \" \"\\n\"|sort -t \"_\" -k 3,3n -k 4,4n);c=1;for i in $ordered_args;do eval v=\"\\$$i\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in *_out) op=\"$(echo \"$v\"|cut -c1)\";if [ \"$op\" != \"&\" -a \"$op\" != \"\\\"\" -a \"$op\" != \"|\" ];then if [ -z \"$head1\" ];then if [ -n \"$(echo \"$v\"|grep \"<\")\" ];then head1=\"$(echo \"$v\"|cut -f1 -d\"<\"|tr \"&\" \".\")\";else head1=\"$(echo \"$v\"|tr \"&\" \".\")\";fi;head2=\"$(echo \"$v\"|cut -f2 -d\"<\")\";if [ -n \"$head2\" -a \"$head2\" != \"$v\"  ];then op=\"$(echo \"$head2\"|cut -c1)\";if [ \"$op\" != \"&\" -a \"$op\" != \"\\\"\" -a \"$op\" != \"|\" ];then head2=\"$(echo \"$head2\"|tr \"&\" \".\")\";else head2=\"$(echo \"$head2\"|cut -c2-|tr \"&\" \".\")\";fi;head2pos=\"$(echo \"$i\"|cut -f3 -d\"_\")\";else unset head2;fi;elif [ -n \"$head1\" -a -z \"$head2\" -a -z \"$(echo \"$v\"|grep \"<\")\" ];then head2=\"$(echo \"$v\"|tr \"&\" \".\")\";head2pos=\"$(echo \"$i\"|cut -f3 -d\"_\")\";elif [ -n \"$head1\" -a -n \"$head2\" ];then head2=\"$head2\"\".\"\"$(echo \"$v\"|tr \"&\" \".\")\";fi;fi; ;;esac;c=$(($c+1));done;options=\"$(echo \"$head1\"|tr \"&\" \".\")\";c=1;for i in $ordered_args;do eval v=\"\\$$i\";echo name;echo $i;echo content;echo \"$v\";case \"$i\" in *_out) op=\"$(echo \"$v\"|cut -c1)\";pos=\"$(echo \"$i\"|cut -f3 -d\"_\")\";if [ \"$op\" = \"&\" ];then options=\"$options\"\"$(echo \"$v\"|tr \"&\" \".\")\";savepos=\"$pos\";elif [ \"$op\" = \"|\" -a -z \"$head2\" ];then eval ${optionlist}${listsize}=\"\\\"$options\\\"\";options=\"$(echo $v|cut -c2-)\";listsize=$(($listsize+1));savepos=\"$pos\";elif [ \"$op\" = \"|\" -a -n \"$head2\" -a \"$pos\" -lt \"$head2pos\" ];then eval ${optionlist}${listsize}=\"\\\"$options\\\"\";options=\"$(echo $v|cut -c2-)\";listsize=$(($listsize+1));savepos=\"$pos\";elif [ \"$op\" = \"|\" -a -n \"$head2\" -a \"$pos\" -ge \"$head2pos\" ];then if [ \"$savepos\" -ge \"$head2pos\" ];then eval ${reloptionlist}${rellistsize}=\"\\\"$options\\\"\";options=\"$(echo $v|cut -c2-)\";rellistsize=$(($rellistsize+1));savepos=\"$pos\";else eval ${optionlist}${listsize}=\"\\\"$options\\\"\";options=\"$(echo $v|cut -c2-)\";listsize=$(($listsize+1));savepos=\"$pos\";fi;elif [ \"$op\" = \"\\\"\" ];then options=\"$options\"\".\"\"$(echo \"$v\"|tr \"&\" \".\")\";savepos=\"$pos\";elif [ -n \"$options\" -a -n \"$head2\" ];then if [ -z \"$head2passed\" ];then eval ${optionlist}${listsize}=\"\\\"$options\\\"\";listsize=$(($listsize+1));fi;options=\"$(echo \"$head2\"|tr \"&\" \".\")\";head2passed=true;savepos=\"$pos\";elif [ -n \"$options\" -a -z \"$head2\" -a \"$listsize\" -eq 0  ];then options=\"$options\"\".\"\"$(echo \"$v\"|tr -d \"<\"|tr \"&\" \".\")\";savepos=\"$pos\";elif [ -z \"$head1\" ];then options=\"$options\"\"$(echo \"$v\"|tr \"&\" \".\")\";fi; ;;esac;c=$(($c+1));done;if [ -n \"$options\" -a -z \"$head2\" ];then echo \"options:\";echo \"$options\";eval ${optionlist}${listsize}='\"$options\"';listsize=$(($listsize+1));elif [ -n \"$options\" -a \"$savepos\" -lt \"$head2pos\" ];then echo \"options:\";echo \"$options\";eval ${optionlist}${listsize}='\"$options\"';listsize=$(($listsize+1));elif [ -n \"$options\" -a \"$savepos\" -ge \"$head2pos\" ];then echo \"options:\";echo \"$options\";eval ${reloptionlist}${rellistsize}='\"$options\"';rellistsize=$(($rellistsize+1));fi;echo \"optionlist:\";if [ \"$listsize\" -eq 0 ];then eval ${optionlist}${listsize}=\"\";listsize=$(($listsize+1));fi;if [ \"$rellistsize\" -eq 0 ];then eval ${reloptionlist}${rellistsize}=\"\";rellistsize=$(($rellistsize+1));fi;unset paths;for r in $(seq 0 $(($rellistsize-1)));do echo \"reloptionlist item:\" \"$(eval echo \\$$reloptionlist${r})\";head=$(eval echo \\$$reloptionlist${r});for i in $(seq 0 $(($listsize-1)));do echo \"optionlist item:\" \"$head\"\".\"\"$(eval echo \\$$optionlist${i})\";args=$(echo \"$head\"\".\"\"$(eval echo \\$$optionlist${i})\");args=$(echo \"$args\"|sed \"s/\\\"\\\"/\\/\\//g\"|tr \".\" \"\\n\"|sort|uniq|xargs);echo \"xargs:\" \"$args\";unset options;unset paths;for j in $args;do echo $j;if [ \"$j\" = \"executable\" ];then options=\"$options\"\"&-perm -111\";elif [ \"$j\" = \"-executable\" ];then options=\"$options\"\"&! -perm -111\";elif [ \"$j\" = \"empty\" ];then options=\"$options\"\"&-empty\";elif [ \"$j\" = \"-empty\" ];then options=\"$options\"\"&! -empty\";elif [ \"$j\" = \"symlinked\" ];then options=\"&-L\"\"$options\";elif [ \"$j\" = \"-symlinked\" ];then options=\"&! -L\"\"$options\";else paths=\"$paths\"\"&-path \"\"\\\"\"$(echo \"$j\"|sed \"s/\\/\\//\\\" -path \\\"/g\")\"\\\"\";fi;done;if [ -n \"$paths\" ];then options=\"$paths\"\"$options\";fi;out=\"$out\"\"|\"\"$options\";done;done;eval \"$1\"_out='\"$out\"';elif [ $mood = \"interrogative\" ]; then echo $mood;elif [ $mood = \"indicative\" ]; then echo $mood;fi;"}]}]}
