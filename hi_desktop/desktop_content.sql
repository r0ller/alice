PRAGMA foreign_keys = ON;
BEGIN;

insert into ROOT_TYPE values('H');
insert into ROOT_TYPE values('N');

insert into LANGUAGES values('HUN', 'Hungarian', '1', 'magyar.fst');
insert into LANGUAGES values('ENG', 'English', '1', 'english.fst');

/*TODO: remove ENG_ prefix later from non-terminals*/
insert into SYMBOLS values('A', 'ENG', 'Adjective');
insert into SYMBOLS values('ADV', 'ENG', 'Adverb');
insert into SYMBOLS values('CON', 'ENG', 'Constant');
insert into SYMBOLS values('DET', 'ENG', 'Determiner');
insert into SYMBOLS values('Indef', 'ENG', 'Indefinite Determiner');
insert into SYMBOLS values('N', 'ENG', 'Noun');
insert into SYMBOLS values('ENG_VP', 'ENG', 'Verb Phrase');
insert into SYMBOLS values('ENG_NP', 'ENG', 'Noun Phrase');
insert into SYMBOLS values('ENG_CNP', 'ENG', 'Common Noun Phrase');
insert into SYMBOLS values('ENG_PP', 'ENG', 'Prepositional Phrase');
insert into SYMBOLS values('Stem', 'ENG', 'Stem');
insert into SYMBOLS values('Pl', 'ENG', 'Plural');
insert into SYMBOLS values('Sg', 'ENG', 'Singular');
insert into SYMBOLS values('PREP', 'ENG', 'Preposition');
insert into SYMBOLS values('QPRO', 'ENG', 'Quantifier Pronoun');
insert into SYMBOLS values('V', 'ENG', 'Verb');
insert into SYMBOLS values('ENG_Vbar1', 'ENG', 'Intermediate Verb Pharse');
insert into SYMBOLS values('ENG_Vbar2', 'ENG', 'Intermediate Verb Pharse');
insert into SYMBOLS values('ENG_Vbar3', 'ENG', 'Intermediate Verb Pharse');
insert into SYMBOLS values('ENG_Vbar4', 'ENG', 'Intermediate Verb Pharse');
insert into SYMBOLS values('RPRO', 'ENG', 'Relative Pronoun');
insert into SYMBOLS values('Relative', 'ENG', 'Relativizer feature');
insert into SYMBOLS values('Aux', 'ENG', 'Auxiliary');
insert into SYMBOLS values('ENG_RC', 'ENG', 'Relative Clause');
insert into SYMBOLS values('ENG_IVP', 'ENG', 'Incomplete Verb Phrase');
insert into SYMBOLS values('ENG_V', 'ENG', 'Verb');
insert into SYMBOLS values('ENG_TP', 'ENG', 'Tense Phrase');
insert into SYMBOLS values('ENG_DP', 'ENG', 'Determiner Phrase');
insert into SYMBOLS values('ENG_RPRO', 'ENG', 'Relative Pronoun');
insert into SYMBOLS values('ENG_NV', 'ENG', 'Negated Verb');
insert into SYMBOLS values('NEG', 'ENG', 'Negation');
insert into SYMBOLS values('RCV', 'ENG', 'Relative Clause Verb');
insert into SYMBOLS values('PAR', 'ENG', 'Tense particle');
insert into SYMBOLS values('fwVowel', 'ENG', 'following word starts with vowel');
insert into SYMBOLS values('fwConsonant', 'ENG', 'following word starts with consonant');
insert into SYMBOLS values('swVowel', 'ENG', 'word starts with vowel');
insert into SYMBOLS values('swConsonant', 'ENG', 'word starts with consonant');
insert into SYMBOLS values('Gerund', 'ENG', 'Gerund');
insert into SYMBOLS values('S','ENG',NULL);
insert into SYMBOLS values('ENG_NEG','ENG',NULL);
insert into SYMBOLS values('ENG_AdvP','ENG',NULL);
insert into SYMBOLS values('ENG_Prep','ENG',NULL);
insert into SYMBOLS values('ENG_AP','ENG',NULL);
insert into SYMBOLS values('ENG_QPro', 'ENG',NULL);
insert into SYMBOLS values('ENG_Adv','ENG',NULL);
insert into SYMBOLS values('ENG_V_Stem','ENG',NULL);
insert into SYMBOLS values('ENG_V_lfea_aux','ENG',NULL);
insert into SYMBOLS values('ENG_V_ger','ENG',NULL);
insert into SYMBOLS values('ENG_V_lfea_ger','ENG',NULL);
insert into SYMBOLS values('ENG_N','ENG',NULL);
insert into SYMBOLS values('ENG_N_Sg','ENG',NULL);
insert into SYMBOLS values('ENG_N_Pl','ENG',NULL);
insert into SYMBOLS values('ENG_Indef_Det_a','ENG',NULL);
insert into SYMBOLS values('ENG_Indef_Det_an','ENG',NULL);
insert into SYMBOLS values('ENG_N_Sg_0Con','ENG',NULL);
insert into SYMBOLS values('ENG_N_Sg_0Con_swC','ENG',NULL);
insert into SYMBOLS values('ENG_N_Sg_0Con_swV','ENG',NULL);
insert into SYMBOLS values('ENG_1Con','ENG',NULL);
insert into SYMBOLS values('ENG_N_Pl_0Con','ENG',NULL);
insert into SYMBOLS values('ENG_N_Pl_0Con_swC','ENG',NULL);
insert into SYMBOLS values('ENG_N_Pl_0Con_swV','ENG',NULL);
insert into SYMBOLS values('ENG_nCon','ENG',NULL);
insert into SYMBOLS values('ENG_Con','ENG',NULL);
insert into SYMBOLS values('ENG_N_Stem','ENG',NULL);
insert into SYMBOLS values('ENG_N_lfea_Sg','ENG',NULL);
insert into SYMBOLS values('ENG_N_lfea_Pl','ENG',NULL);
insert into SYMBOLS values('ENG_A','ENG',NULL);
insert into SYMBOLS values('ENG_RPro','ENG',NULL);
insert into SYMBOLS values('ENG_RPro_stem','ENG',NULL);
insert into SYMBOLS values('ENG_RPro_lfea_relative','ENG',NULL);
insert into SYMBOLS values('ENG_Tense_particle','ENG',NULL);
insert into SYMBOLS values('ENG_Indef_Det','ENG',NULL);
insert into SYMBOLS values('ENG_Det_stem','ENG',NULL);
insert into SYMBOLS values('ENG_lfea_IndefDet','ENG',NULL);
insert into SYMBOLS values('ENG_lfea_fwVowel','ENG',NULL);
insert into SYMBOLS values('ENG_lfea_fwConsonant','ENG',NULL);
insert into SYMBOLS values('ENG_lfea_swVowel','ENG',NULL);
insert into SYMBOLS values('ENG_lfea_swConsonant','ENG',NULL);
insert into SYMBOLS values('t_ENG_V_Stem','ENG',NULL);
insert into SYMBOLS values('t_ENG_V_Aux','ENG',NULL);
insert into SYMBOLS values('t_ENG_V_Gerund','ENG',NULL);
insert into SYMBOLS values('t_ENG_QPRO','ENG',NULL);
insert into SYMBOLS values('t_ENG_N_Stem','ENG',NULL);
insert into SYMBOLS values('t_ENG_N_Pl','ENG',NULL);
insert into SYMBOLS values('t_ENG_N_Sg','ENG',NULL);
insert into SYMBOLS values('t_ENG_A_Stem','ENG',NULL);
insert into SYMBOLS values('t_ENG_PREP','ENG',NULL);
insert into SYMBOLS values('t_Con','ENG',NULL);
insert into SYMBOLS values('t_ENG_ADV','ENG',NULL);
insert into SYMBOLS values('t_ENG_RPRO','ENG',NULL);
insert into SYMBOLS values('t_ENG_RPRO_Relative','ENG',NULL);
insert into SYMBOLS values('t_ENG_PAR','ENG',NULL);
insert into SYMBOLS values('t_ENG_NEG_Stem','ENG',NULL);
insert into SYMBOLS values('t_ENG_DET','ENG',NULL);
insert into SYMBOLS values('t_ENG_DET_Indef','ENG',NULL);
insert into SYMBOLS values('t_ENG_DET_fwVowel','ENG',NULL);
insert into SYMBOLS values('t_ENG_DET_fwConsonant','ENG',NULL);
insert into SYMBOLS values('t_ENG_N_swVowel','ENG',NULL);
insert into SYMBOLS values('t_ENG_N_swConsonant','ENG',NULL);

insert into SYMBOLS values('HUN_VP','HUN',NULL);
insert into SYMBOLS values('HUN_ImpVerbPfx','HUN',NULL);
insert into SYMBOLS values('HUN_ImpVerb','HUN',NULL);
insert into SYMBOLS values('HUN_Verb_lfea_ConjDefSg2','HUN',NULL);
insert into SYMBOLS values('HUN_Verb_stem','HUN',NULL);
insert into SYMBOLS values('HUN_Vbpfx','HUN',NULL);
insert into SYMBOLS values('HUN_NP','HUN',NULL);
insert into SYMBOLS values('HUN_N','HUN',NULL);
insert into SYMBOLS values('HUN_N_Sg','HUN',NULL);
insert into SYMBOLS values('HUN_1Con','HUN',NULL);
insert into SYMBOLS values('HUN_nCon','HUN',NULL);
insert into SYMBOLS values('HUN_AccCon','HUN',NULL);
insert into SYMBOLS values('HUN_Con','HUN',NULL);
insert into SYMBOLS values('HUN_Con_lfea_Acc','HUN',NULL);
insert into SYMBOLS values('S','HUN',NULL);
insert into SYMBOLS values('t_HUN_Verb_ConjDefSg2','HUN',NULL);
insert into SYMBOLS values('t_HUN_Verb_Stem','HUN',NULL);
insert into SYMBOLS values('t_HUN_Vbpfx_Stem','HUN',NULL);
insert into SYMBOLS values('t_Con','HUN',NULL);
insert into SYMBOLS values('t_HUN_CON_Acc','HUN',NULL);

/*Constant has hardcoded token value 1 in the yacc source so to avoid collision, the values here are increased
by 1 during runtime; Entries with NULL value for token are not to be generated in the yacc source.*/
/*TODO: Think over if the feature field for all gcats shall at least be 'Stem' or not?
For exmaple, DET is considered as well to have a stem? How is it analysed by Foma?*/
insert into GCAT values('CON', NULL, 'ENG', '0');/*Plays role only when checking for terminal symbols*/
insert into GCAT values('A', 'Stem', 'ENG', '1');
insert into GCAT values('ADV', NULL, 'ENG', '2');
insert into GCAT values('DET', NULL, 'ENG', '3');
insert into GCAT values('N', 'Stem', 'ENG', '4');
insert into GCAT values('N', 'Pl', 'ENG', '5');
insert into GCAT values('N', 'Sg', 'ENG', '6');
insert into GCAT values('PREP', NULL, 'ENG', '7');
insert into GCAT values('QPRO', NULL, 'ENG', '8');
insert into GCAT values('V', 'Stem', 'ENG', '9');
insert into GCAT values('V', 'Aux', 'ENG', '10');
insert into GCAT values('V', 'RCV', 'ENG', NULL);
insert into GCAT values('V', 'Sg', 'ENG', NULL);
insert into GCAT values('V', 'Pl', 'ENG', NULL);
insert into GCAT values('RPRO', NULL, 'ENG', '11');
insert into GCAT values('RPRO', 'Relative', 'ENG', '12');
insert into GCAT values('NEG', 'Stem', 'ENG', '13');
insert into GCAT values('PAR', NULL, 'ENG', '18');
insert into GCAT values('DET', 'Indef', 'ENG', '19');
insert into GCAT values('DET', 'fwVowel', 'ENG', '20');
insert into GCAT values('DET', 'fwConsonant', 'ENG', '21');
insert into GCAT values('N', 'swVowel', 'ENG', '22');
insert into GCAT values('N', 'swConsonant', 'ENG', '23');
insert into GCAT values('V', 'Gerund', 'ENG', '24');

insert into FUNCTOR_DEFS values('LISTENGV_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('LISTENGV_2', '', '1', NULL);
insert into FUNCTOR_DEFS values('FILEENGN_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('INENGPREP_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('BEENGV_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('DIRECTORYENGN_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('NOTENGNEG_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('FROMENGPREP_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('EXECUTABLEENGA_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('EMPTYENGA_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('ANAENGDET_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('THATENGRPRO_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('FILEBEPROP_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('DIRBEPROP_1', '', '1', NULL);
insert into FUNCTOR_DEFS values('SYMBOLICENGA_1', '', '1', NULL);

insert into FUNCTORS values('CON', '1', NULL);
insert into FUNCTORS values('INENGPREP', '1', 'INENGPREP_1');
insert into FUNCTORS values('FROMENGPREP', '1', 'FROMENGPREP_1');
insert into FUNCTORS values('LISTENGV', '1', 'LISTENGV_1');
insert into FUNCTORS values('LISTENGV', '2', 'LISTENGV_2');
insert into FUNCTORS values('THATENGRPRO', '1', 'THATENGRPRO_1');
insert into FUNCTORS values('FILEENGN', '1', 'FILEENGN_1');
insert into FUNCTORS values('DIRECTORYENGN', '1', 'DIRECTORYENGN_1');
insert into FUNCTORS values('BEENGV', '1', 'BEENGV_1');
insert into FUNCTORS values('BEENGV', '2', 'BEENGV_1');
insert into FUNCTORS values('NOTENGNEG', '1', 'NOTENGNEG_1');
insert into FUNCTORS values('NOTENGNEG', '2', 'NOTENGNEG_1');
insert into FUNCTORS values('EXECUTABLEENGA', '1', 'EXECUTABLEENGA_1');
insert into FUNCTORS values('EMPTYENGA', '1', 'EMPTYENGA_1');
insert into FUNCTORS values('SYMBOLICENGA', '1', 'SYMBOLICENGA_1');
insert into FUNCTORS values('ANAENGDET', '1', 'ANAENGDET_1');
insert into FUNCTORS values('FILEBEPROP', '1', 'FILEBEPROP_1');
insert into FUNCTORS values('DIRBEPROP', '1', 'DIRBEPROP_1');

insert into FUNCTOR_TAGS values('LISTENGV', '1', 'main_verb', '1', 'type', 'action');

insert into RULE_TO_RULE_MAP values( 'ENG_Vbar1', 'ENG_V', 'ENG_NP', '1', '2', NULL, 'RCV',  NULL, 'H', NULL, NULL, NULL, NULL, NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_Vbar1', 'ENG_V', 'ENG_NP', '2', '3', '4', 'N', NULL, 'N', NULL, 'CON', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_Vbar1', 'ENG_V', 'ENG_NP', '3', '4', NULL, 'V', NULL, 'H', NULL, 'CON', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_Vbar1', 'ENG_V', 'ENG_NP', '4', NULL, '5', 'V', NULL, 'H', NULL, 'N', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_Vbar1', 'ENG_V', 'ENG_NP', '5', '5', '6', NULL, NULL, NULL, NULL, 'Sg', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_Vbar1', 'ENG_V', 'ENG_NP', '6', '7', NULL, NULL, NULL, NULL, NULL, 'N', 'FILEENGN', 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_Vbar1', 'ENG_V', 'ENG_NP', '7', '7', '8', NULL, NULL, NULL, NULL, 'N', 'DIRECTORYENGN', 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_Vbar1', 'ENG_V', 'ENG_NP', '8', NULL, '8', NULL, NULL, NULL, NULL, 'CON', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_Vbar2', 'ENG_Vbar1', 'ENG_PP', '1', NULL, NULL, 'N', NULL, 'H', NULL, 'PREP', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_CNP', 'A', 'ENG_CNP', '1', NULL, NULL, 'N', NULL, 'N', NULL, 'A', NULL, 'H', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_PP', 'PREP', 'ENG_NP', '1', '2', '3', 'PREP', NULL, 'H', NULL, 'N', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_PP', 'PREP', 'ENG_NP', '2', NULL, NULL, 'PREP', NULL, 'H', NULL, 'CON', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_PP', 'PREP', 'ENG_NP', '3', NULL, NULL, 'N', NULL, 'N', NULL, 'CON', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar1', 'ENG_RC', '1', NULL, '2', 'N', NULL, 'H', NULL, 'RPRO', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar1', 'ENG_RC', '2', NULL, '3', 'RCV', NULL, 'N', NULL, NULL, NULL, NULL, NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar1', 'ENG_RC', '3', NULL, '5', 'RPRO', NULL, 'N', NULL, 'V', NULL, 'N', NULL, 'ENG');
/*insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar1', 'ENG_RC', '4', '5', NULL, 'NEG', NULL, 'N', NULL, 'A', NULL, 'H', NULL, 'ENG');*/
insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar1', 'ENG_RC', '5', '5', NULL, 'V', NULL, 'N', NULL, 'A', NULL, 'H', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar2', 'ENG_RC', '1', NULL, '2', 'N', NULL, 'H', 'ENG_Vbar1', 'RPRO', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar2', 'ENG_RC', '2', NULL, '3', 'RCV', NULL, 'N', NULL, NULL, NULL, NULL, NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar2', 'ENG_RC', '3', NULL, '4', 'RPRO', NULL, 'N', NULL, 'V', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_VP', 'ENG_Vbar2', 'ENG_RC', '4', '4', NULL, 'V', NULL, 'N', NULL, 'PREP', NULL, 'H', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_IVP', 'ENG_V', 'ENG_PP', '1', NULL, NULL, 'V', NULL, 'H', NULL, 'PREP', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_IVP', 'ENG_NV', 'ENG_PP', '1', NULL, '2', 'V', NULL, 'H', NULL, 'NEG', NULL, 'H', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_IVP', 'ENG_NV', 'ENG_PP', '2', NULL, NULL, 'NEG', NULL, 'H', NULL, 'PREP', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_IVP', 'ENG_V', 'A', '1', NULL, NULL, 'V', NULL, 'H', NULL, 'A', NULL, 'N', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_IVP', 'ENG_NV', 'A', '1', NULL, '2', 'V', NULL, 'H', NULL, 'NEG', NULL, 'H', NULL, 'ENG');
insert into RULE_TO_RULE_MAP values( 'ENG_IVP', 'ENG_NV', 'A', '2', NULL, NULL, 'NEG', NULL, 'H', NULL, 'A', NULL, 'N', NULL, 'ENG');

/*insert into RULE_TO_RULE_MAP values( 'HUN_VP', 'HUN_ImpVerbPfx', 'HUN_NP', '1', '2', NULL, 'Verb', NULL, 'H', NULL, 'Noun', NULL, 'N', NULL, 'HUN');
insert into RULE_TO_RULE_MAP values( 'HUN_VP', 'HUN_ImpVerbPfx', 'HUN_NP', '2', NULL, NULL, 'Verb', NULL, 'H', NULL, 'CON', NULL, 'N', NULL, 'HUN');
insert into RULE_TO_RULE_MAP values( 'HUN_ImpVerbPfx', 'HUN_ImpVerb', 'Vbpfx', '1', NULL, NULL, 'Verb', NULL, 'H', NULL, 'Vbpfx', NULL, 'N', NULL, 'HUN');
insert into RULE_TO_RULE_MAP values( 'HUN_VP', 'HUN_ImpVerbPfx', 'HUN_DP', '1', '2', NULL, 'Verb', NULL, 'H', NULL, 'CON', NULL, 'N', NULL, 'HUN');
insert into RULE_TO_RULE_MAP values( 'HUN_VP', 'HUN_ImpVerbPfx', 'HUN_DP', '2', '3', NULL, 'Verb', NULL, 'H', NULL, 'Num', NULL, 'N', NULL, 'HUN');
insert into RULE_TO_RULE_MAP values( 'HUN_VP', 'HUN_ImpVerbPfx', 'HUN_DP', '3', NULL, NULL, 'Verb', NULL, 'H', NULL, 'Noun', NULL, 'N', NULL, 'HUN');
*/

insert into LEXICON values('list', 'ENG', 'V', 'LISTENGV');
insert into LEXICON values('file', 'ENG', 'N', 'FILEENGN');
insert into LEXICON values('directory', 'ENG', 'N', 'DIRECTORYENGN');
insert into LEXICON values('from', 'ENG', 'PREP', 'FROMENGPREP');
insert into LEXICON values('in', 'ENG', 'PREP', 'INENGPREP');
insert into LEXICON values('is', 'ENG', 'V', 'BEENGV');
insert into LEXICON values('are', 'ENG', 'V', 'BEENGV');
insert into LEXICON values('be', 'ENG', 'V', 'BEENGV');
insert into LEXICON values('not', 'ENG', 'NEG', 'NOTENGNEG');
insert into LEXICON values('that', 'ENG', 'RPRO', 'THATENGRPRO');
insert into LEXICON values('executable', 'ENG', 'A', 'EXECUTABLEENGA');
insert into LEXICON values('empty', 'ENG', 'A', 'EMPTYENGA');
insert into LEXICON values('symbolic', 'ENG', 'A', 'SYMBOLICENGA');
insert into LEXICON values('a', 'ENG', 'DET', 'ANAENGDET');
insert into LEXICON values('an', 'ENG', 'DET', 'ANAENGDET');
/*
insert into LEXICON values('to', 'ENG', 'PREP', 'TOENGPREP');
insert into LEXICON values('to', 'ENG', 'PAR', 'TOENGPAR');
*/

/*no value in the semantic_dependency field means no dependency*/
insert into DEPOLEX values('CON', '1', '1', NULL, NULL, NULL, NULL, NULL, NULL);
insert into DEPOLEX values('DIRECTORYENGN', '1', '1', NULL, '2', NULL, '0', 'BEENGV', '2');
insert into DEPOLEX values('DIRECTORYENGN', '1', '2', '1', '2', NULL, '1', 'CON', '1');
insert into DEPOLEX values('EMPTYENGA', '1', '1', NULL, NULL, NULL, NULL, NULL, NULL);
insert into DEPOLEX values('SYMBOLICENGA', '1', '1', NULL, NULL, NULL, NULL, NULL, NULL);
insert into DEPOLEX values('EXECUTABLEENGA', '1', '1', NULL, NULL, NULL, NULL, NULL, NULL);
insert into DEPOLEX values('FILEENGN', '1', '1', NULL, '2', NULL, '0', 'BEENGV', '1');
insert into DEPOLEX values('FILEENGN', '1', '2', '1', '2', NULL, '1', 'CON', '1');
insert into DEPOLEX values('FROMENGPREP', '1', '1', NULL, '1', NULL, '0', 'DIRECTORYENGN', '1');
insert into DEPOLEX values('INENGPREP', '1', '1', NULL, '1', NULL, '0', 'DIRECTORYENGN', '1');
insert into DEPOLEX values('LISTENGV', '1', '1', NULL, NULL, NULL, '0', 'FILEENGN', '1');
insert into DEPOLEX values('LISTENGV', '2', '1', NULL, '1', NULL, '0', 'DIRECTORYENGN', '1');
insert into DEPOLEX values('THATENGRPRO', '1', '1', NULL, NULL, NULL, '0', NULL, NULL);
insert into DEPOLEX values('BEENGV', '1', '1', '1', '2', '2', '0', 'NOTENGNEG', '1');
insert into DEPOLEX values('BEENGV', '1', '2', '1', '2', NULL, '0', 'FILEBEPROP', '1');
insert into DEPOLEX values('NOTENGNEG', '1', '1', NULL, '1', NULL, '0', 'FILEBEPROP', '1');
insert into DEPOLEX values('FILEBEPROP', '1', '1', '1', '2', '2', '0', 'EXECUTABLEENGA', '1');
insert into DEPOLEX values('FILEBEPROP', '1', '2', '1', NULL, NULL, '0', 'INENGPREP', '1');
insert into DEPOLEX values('BEENGV', '2', '1', '1', '2', '2', '0', 'NOTENGNEG', '2');
insert into DEPOLEX values('BEENGV', '2', '2', '1', '2', NULL, '0', 'DIRBEPROP', '1');
insert into DEPOLEX values('NOTENGNEG', '2', '1', NULL, '1', NULL, '0', 'DIRBEPROP', '1');
insert into DEPOLEX values('DIRBEPROP', '1', '1', '1', '2', '2', '0', 'EMPTYENGA', '1');
insert into DEPOLEX values('DIRBEPROP', '1', '2', '1', '3', '3', '0', 'SYMBOLICENGA', '1');
insert into DEPOLEX values('DIRBEPROP', '1', '3', '1', NULL, NULL, '0', 'INENGPREP', '1');
insert into DEPOLEX values('ANAENGDET', '1', '1', NULL, NULL, NULL, NULL, NULL, NULL);
/*insert into DEPOLEX values('TOENGPREP', '1', '1', NULL, NULL, NULL, NULL, NULL, NULL);
insert into DEPOLEX values('TOENGPAR', '1', '1', NULL, NULL, NULL, NULL, NULL, NULL);*/

insert into GRAMMAR values('ENG','S','ENG_VP',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_VP','ENG_Vbar1',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_VP','ENG_Vbar1','ENG_AdvP',NULL);
insert into GRAMMAR values('ENG','ENG_VP','ENG_Vbar2',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_VP','ENG_Vbar2','ENG_PP',NULL);
insert into GRAMMAR values('ENG','ENG_VP','ENG_Vbar3','ENG_NP',NULL);
insert into GRAMMAR values('ENG','ENG_VP','ENG_Vbar1','ENG_RC',NULL);
insert into GRAMMAR values('ENG','ENG_VP','ENG_Vbar2','ENG_RC',NULL);
insert into GRAMMAR values('ENG','ENG_VP','ENG_Vbar4','ENG_DP',NULL);
insert into GRAMMAR values('ENG','ENG_IVP','ENG_V','ENG_PP',
'"const node_info& ENG_V=sparser->get_node_info($1);
const node_info& ENG_PP=sparser->get_node_info($2);
sparser->add_feature_to_leaf(ENG_V,"RCV");
$$=sparser->combine_nodes("ENG_IVP",ENG_V,ENG_PP);
std::cout<<"ENG_IVP->ENG_V ENG_PP"<<std::endl;"');
insert into GRAMMAR values('ENG','ENG_IVP','ENG_NV','ENG_PP',
'"const node_info& ENG_NV=sparser->get_node_info($1);
const node_info& ENG_PP=sparser->get_node_info($2);
sparser->add_feature_to_leaf(ENG_NV,"V","RCV");
$$=sparser->combine_nodes("ENG_IVP",ENG_NV,ENG_PP);
std::cout<<"ENG_IVP->ENG_NV ENG_PP"<<std::endl;"');
insert into GRAMMAR values('ENG','ENG_NV','ENG_V','ENG_NEG',NULL);
insert into GRAMMAR values('ENG','ENG_Vbar3','ENG_V','ENG_AdvP',NULL);
insert into GRAMMAR values('ENG','ENG_Vbar2','ENG_Vbar1','ENG_PP',NULL);
insert into GRAMMAR values('ENG','ENG_Vbar2','ENG_Vbar1','ENG_NP',NULL);
insert into GRAMMAR values('ENG','ENG_Vbar1','ENG_V','ENG_NP',
'"const node_info& ENG_V=sparser->get_node_info($1);
const node_info& ENG_NP=sparser->get_node_info($2);
sparser->add_feature_to_leaf(ENG_V,"main_verb");
$$=sparser->combine_nodes("ENG_Vbar1",ENG_V,ENG_NP);
std::cout<<"ENG_Vbar1->ENG_V ENG_NP"<<std::endl;"');
insert into GRAMMAR values('ENG','ENG_Vbar4','ENG_DP','ENG_V',
'"const node_info& ENG_DP=sparser->get_node_info($1);
const node_info& ENG_V=sparser->get_node_info($2);
sparser->add_feature_to_leaf(ENG_V,"main_verb");
$$=sparser->combine_nodes("ENG_Vbar4",ENG_V,ENG_DP);
std::cout<<"ENG_Vbar4->ENG_DP ENG_V"<<std::endl;"');
insert into GRAMMAR values('ENG','ENG_Vbar4','ENG_TP','ENG_V',
'"const node_info& ENG_TP=sparser->get_node_info($1);
const node_info& ENG_V=sparser->get_node_info($2);
sparser->add_feature_to_leaf(ENG_V,"main_verb");
$$=sparser->combine_nodes("ENG_Vbar4",ENG_V,ENG_TP);
std::cout<<"ENG_Vbar4->ENG_TP ENG_V"<<std::endl;"');
insert into GRAMMAR values('ENG','ENG_PP','ENG_Prep','ENG_NP',NULL);
insert into GRAMMAR values('ENG','ENG_NP','ENG_CNP',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_NP','ENG_AP',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_NP','ENG_QPro','ENG_CNP',NULL);
insert into GRAMMAR values('ENG','ENG_CNP','ENG_A','ENG_CNP',NULL);
insert into GRAMMAR values('ENG','ENG_CNP','ENG_N',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_AdvP','ENG_Adv',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_V','ENG_V_Stem',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_V','ENG_V_Stem','ENG_V_lfea_aux',NULL);
insert into GRAMMAR values('ENG','ENG_V_ger','ENG_V_Stem','ENG_V_lfea_ger',NULL);
insert into GRAMMAR values('ENG','ENG_V_Stem','t_ENG_V_Stem',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_V_lfea_aux','t_ENG_V_Aux',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_V_lfea_ger','t_ENG_V_Gerund',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_QPro','t_ENG_QPRO',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N','ENG_N_Sg',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N','ENG_N_Pl',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_DP','ENG_Indef_Det_a','ENG_N_Sg_0Con_swC',NULL);
insert into GRAMMAR values('ENG','ENG_DP','ENG_Indef_Det_an','ENG_N_Sg_0Con_swV',NULL);
insert into GRAMMAR values('ENG','ENG_N_Sg_0Con','ENG_N_Stem','ENG_N_lfea_Sg',NULL);
insert into GRAMMAR values('ENG','ENG_N_Sg_0Con_swC','ENG_N_Sg_0Con','ENG_lfea_swConsonant',NULL);
insert into GRAMMAR values('ENG','ENG_N_Sg_0Con_swV','ENG_N_Sg_0Con','ENG_lfea_swVowel',NULL);
insert into GRAMMAR values('ENG','ENG_N_Sg','ENG_N_Sg_0Con_swC','ENG_1Con',NULL);
insert into GRAMMAR values('ENG','ENG_N_Sg','ENG_N_Sg_0Con_swV','ENG_1Con',NULL);
insert into GRAMMAR values('ENG','ENG_N_Sg','ENG_1Con',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N_Sg','ENG_N_Sg_0Con_swC',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N_Sg','ENG_N_Sg_0Con_swV',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl_0Con','ENG_N_Stem','ENG_N_lfea_Pl',NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl_0Con_swC','ENG_N_Pl_0Con','ENG_lfea_swConsonant',NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl_0Con_swV','ENG_N_Pl_0Con','ENG_lfea_swVowel',NULL);
insert into GRAMMAR values('ENG','ENG_1Con','ENG_Con',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_nCon','ENG_1Con','ENG_Con',NULL);
insert into GRAMMAR values('ENG','ENG_nCon','ENG_nCon','ENG_Con',NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl','ENG_N_Pl_0Con_swC',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl','ENG_N_Pl_0Con_swV',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl','ENG_N_Pl_0Con_swC','ENG_nCon',NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl','ENG_N_Pl_0Con_swV','ENG_nCon',NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl','ENG_nCon',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N_Pl','ENG_N_Sg','ENG_nCon',
'"//Exploit read ahead triggered by the shift/reduce conflict due to this very rule and return error to make sure
//that a singular noun cannot combine with more than one constant like in ''list file abc def''
//TODO: Any better solution???
return -1;"');
insert into GRAMMAR values('ENG','ENG_N_Stem','t_ENG_N_Stem',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N_lfea_Sg','t_ENG_N_Sg',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_N_lfea_Pl','t_ENG_N_Pl',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_A','t_ENG_A_Stem',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_AP','ENG_1Con','ENG_N_Pl_0Con_swC',NULL);
insert into GRAMMAR values('ENG','ENG_AP','ENG_1Con','ENG_N_Pl_0Con_swV',NULL);
insert into GRAMMAR values('ENG','ENG_Prep','t_ENG_PREP',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_Con','t_Con',NULL,
'"lexicon word;
const node_info& empty_node_info={};
word=lex->last_word_scanned(t_Con);
$$=sparser->set_node_info(word,empty_node_info);
std::cout<<"Constant:"<<word.word<<std::endl;"');
insert into GRAMMAR values('ENG','ENG_Adv','t_ENG_ADV',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_RPro','ENG_RPro_stem','ENG_RPro_lfea_relative',NULL);
insert into GRAMMAR values('ENG','ENG_RPro_stem','t_ENG_RPRO',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_RPro_lfea_relative','t_ENG_RPRO_Relative',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_Tense_particle','t_ENG_PAR',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_TP','ENG_Tense_particle','ENG_V_Stem',NULL);
insert into GRAMMAR values('ENG','ENG_TP','ENG_V_ger',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_RC','ENG_RPro','ENG_IVP',NULL);
insert into GRAMMAR values('ENG','ENG_NEG','t_ENG_NEG_Stem',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_Indef_Det_an','ENG_Indef_Det','ENG_lfea_fwVowel',NULL);
insert into GRAMMAR values('ENG','ENG_Indef_Det_a','ENG_Indef_Det','ENG_lfea_fwConsonant',NULL);
insert into GRAMMAR values('ENG','ENG_Indef_Det','ENG_Det_stem','ENG_lfea_IndefDet',NULL);
insert into GRAMMAR values('ENG','ENG_Det_stem','t_ENG_DET',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_lfea_IndefDet','t_ENG_DET_Indef',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_lfea_fwVowel','t_ENG_DET_fwVowel',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_lfea_fwConsonant','t_ENG_DET_fwConsonant',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_lfea_swVowel','t_ENG_N_swVowel',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_lfea_swConsonant','t_ENG_N_swConsonant',NULL,NULL);
insert into GRAMMAR values('ENG','ENG_IVP','ENG_V','ENG_A',
'"const node_info& ENG_V=sparser->get_node_info($1);
const node_info& ENG_A=sparser->get_node_info($2);
sparser->add_feature_to_leaf(ENG_V,"RCV");
$$=sparser->combine_nodes("ENG_IVP",ENG_V,ENG_A);
std::cout<<"ENG_IVP->ENG_V ENG_A"<<std::endl;"');
insert into GRAMMAR values('ENG','ENG_IVP','ENG_NV','ENG_A',
'"const node_info& ENG_NV=sparser->get_node_info($1);
const node_info& ENG_A=sparser->get_node_info($2);
sparser->add_feature_to_leaf(ENG_NV,"V","RCV");
$$=sparser->combine_nodes("ENG_IVP",ENG_NV,ENG_A);
std::cout<<"ENG_IVP->ENG_NV ENG_A"<<std::endl;"');

/*insert into GRAMMAR values('HUN','S','HUN_VP',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_VP','HUN_ImpVerbPfx','HUN_NP',NULL);
insert into GRAMMAR values('HUN','HUN_ImpVerbPfx','HUN_ImpVerb','HUN_Vbpfx',NULL);
insert into GRAMMAR values('HUN','HUN_ImpVerb','HUN_Verb_stem','HUN_Verb_lfea_ConjDefSg2',
'"const node_info& HUN_Verb_stem=sparser->get_node_info($1);
const node_info& HUN_Verb_lfea_ConjDefSg2=sparser->get_node_info($2);
sparser->add_feature_to_leaf(HUN_Verb_stem,"main_verb");
$$=sparser->combine_nodes("HUN_ImpVerb",HUN_Verb_stem,HUN_Verb_lfea_ConjDefSg2);
logger::singleton()->log(0,"HUN_ImpVerb->HUN_Verb_stem HUN_Verb_lfea_ConjDefSg2");"');*/
/*std::cout<<"HUN_ImpVerb->HUN_Verb_stem HUN_Verb_lfea_ConjDefSg2"<<std::endl;"');*/
/*insert into GRAMMAR values('HUN','HUN_Verb_lfea_ConjDefSg2','t_HUN_Verb_ConjDefSg2',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Verb_stem','t_HUN_Verb_Stem',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Vbpfx','t_HUN_Vbpfx_Stem',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_NP','HUN_N_Acc',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Noun_Stem','HUN_lfea_swVowel','HUN_Noun_Stem',NULL);
insert into GRAMMAR values('HUN','HUN_Noun_Stem','HUN_lfea_swConsonant','HUN_Noun_Stem',NULL);
insert into GRAMMAR values('HUN','HUN_Noun_Stem','t_HUN_Noun_Stem',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_N_Sg','HUN_Noun_Stem',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_N_Acc','HUN_N_Sg','HUN_Con_lfea_Acc',NULL);
insert into GRAMMAR values('HUN','HUN_1Con','HUN_Con',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_nCon','HUN_1Con','HUN_Con',NULL);
insert into GRAMMAR values('HUN','HUN_nCon','HUN_nCon','HUN_Con',NULL);
insert into GRAMMAR values('HUN','HUN_N_Sg','HUN_nCon',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_N_Sg','HUN_1Con',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Con','t_Con',NULL,
'"lexicon word;
const node_info& empty_node_info={};
word=lex->last_word_scanned(t_Con);
$$=sparser->set_node_info(word,empty_node_info);
logger::singleton()->log(0,"Konstans:"+word.word);"');*/
/*std::cout<<"Konstans:"<<word.word<<std::endl;"');*/
/*insert into GRAMMAR values('HUN','HUN_Con','HUN_lfea_swVowel','HUN_Con',NULL);
insert into GRAMMAR values('HUN','HUN_Con','HUN_lfea_swConsonant','HUN_Con',NULL);
insert into GRAMMAR values('HUN','HUN_Con_lfea_Acc','t_HUN_CON_Acc',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Noun_lfea_Acc','t_HUN_Noun_Acc',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Def_Det_az','HUN_Def_Det','HUN_lfea_fwVowel',NULL);
insert into GRAMMAR values('HUN','HUN_Def_Det_a','HUN_Def_Det','HUN_lfea_fwConsonant',NULL);
insert into GRAMMAR values('HUN','HUN_Def_Det','HUN_Det_stem','HUN_lfea_DefDet',NULL);
insert into GRAMMAR values('HUN','HUN_Det_stem','t_HUN_Det',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_DefDet','t_HUN_Det_Def',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_fwVowel','t_HUN_Det_fwVowel',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_fwConsonant','t_HUN_Det_fwConsonant',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_swVowel','t_HUN_Noun_swVowel',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_swConsonant','t_HUN_Noun_swConsonant',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_swVowel','t_HUN_CON_swVowel',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_swConsonant','t_HUN_CON_swConsonant',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_swVowel','t_HUN_Num_swVowel',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_lfea_swConsonant','t_HUN_Num_swConsonant',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_DP','HUN_DPbar','HUN_N_Acc',NULL);
insert into GRAMMAR values('HUN','HUN_DPbar','HUN_Def_Det_a','HUN_lfea_swConsonant',NULL);
insert into GRAMMAR values('HUN','HUN_DPbar','HUN_Def_Det_az','HUN_lfea_swVowel',NULL);
insert into GRAMMAR values('HUN','HUN_Num_Stem','t_HUN_Num_Stem',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref1',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref2',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref3',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref4',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref5',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref6',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref7',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref8',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref9',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref1n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref2n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref3n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref4n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref5n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref6n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref7n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref8n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref9n',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref1nn',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_Pref','t_HUN_Num_Npref1nnn',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num','HUN_Num_Pref','HUN_Num',NULL);
insert into GRAMMAR values('HUN','HUN_Num','HUN_Num_Stem',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num','HUN_Num','HUN_Num_lfea_Par',NULL);
insert into GRAMMAR values('HUN','HUN_Num','HUN_Num','HUN_Num_lfea_Ik',NULL);
insert into GRAMMAR values('HUN','HUN_N_Acc','HUN_Num','HUN_Num_lfea_Acc',NULL);
insert into GRAMMAR values('HUN','HUN_Num_lfea_Par','t_HUN_Num_Par',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_lfea_Ik','t_HUN_Num_Ik',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_Num_lfea_Acc','t_HUN_Num_Acc',NULL,NULL);
insert into GRAMMAR values('HUN','HUN_VP','HUN_ImpVerbPfx','HUN_DP',NULL);
insert into GRAMMAR values('HUN','HUN_N_Acc','HUN_N_Sg','HUN_Noun_lfea_Acc',NULL);
insert into GRAMMAR values('HUN','HUN_Num','HUN_lfea_swVowel','HUN_Num',NULL);
insert into GRAMMAR values('HUN','HUN_Num','HUN_lfea_swConsonant','HUN_Num',NULL);
insert into GRAMMAR values('HUN','HUN_Nums','HUN_Num','HUN_Num',NULL);
insert into GRAMMAR values('HUN','HUN_Nums','HUN_Nums','HUN_Num',NULL);
insert into GRAMMAR values('HUN','HUN_N_Acc','HUN_Nums','HUN_Num_lfea_Acc',NULL);*/

COMMIT;

/*Old relation functor definitions for later reference:
insert into RELATIONS values('LIST', '', '', 'options=''-maxdepth 1'';find $source$delim$constant $options;constant=;');
insert into RELATIONS values('LIST', '', 'DIRECTORY', 'export source;export delim;export constant;export tests;export options=''-maxdepth 1'';echo -e ''if [ -z $constant ]\nthen\nfind $source$delim$constant $options $tests\nelse\nfind $source$delim$constant $options\nfi'' 1>command;chmod a+x command;./command;constant=;');
insert into RELATIONS values('LIST', '', 'FILE', 'options=''-maxdepth 1'';find $source$delim$constant $options $tests;constant=;');
insert into RELATIONS values('COPY', '', '', 'cp -f $source$delim$constant $target;constant=;');
insert into RELATIONS values('COPY', '', 'FILE', 'export source;export delim;export constant;export tests;export options=''-maxdepth 1'';export target;echo -e ''files="$(find $source$delim$constant $options $tests)";\nfor f in $files\ndo\ncp -f $f $target\ndone'' 1>command;chmod a+x command;./command;constant=;');
insert into RELATIONS values('COPY', '', 'DIRECTORY', 'cp -f $source$delim$constant $target;constant=;');
insert into RELATIONS values('REMOVE', '', '', 'rm $source$delim$constant;constant=;');
insert into RELATIONS values('REMOVE', '', 'DIRECTORY', 'rmdir $source$delim$constant;constant=;');
insert into RELATIONS values('REMOVE', '', 'FILE', 'find $source$delim$constant $options $tests -exec rm ''{}'' +;constant=;');
insert into RELATIONS values('DELETE', '', '', 'rm $source$delim$constant;constant=;');
insert into RELATIONS values('DELETE', '', 'DIRECTORY', 'rmdir $source$delim$constant;constant=;');
insert into RELATIONS values('DELETE', '', 'FILE', 'find $source$delim$constant $options $tests -exec rm ''{}'' +;constant=;');
insert into RELATIONS values('CHANGE', '', 'DIRECTORY', 'source=$constant;constant=;');
insert into RELATIONS values('MAKE', '', 'DIRECTORY', 'mkdir $target$delim$constant;constant=;');
insert into RELATIONS values('MOVE', '', '', 'mv -f $source$delim$constant $target;constant=;');
insert into RELATIONS values('MOVE', '', 'DIRECTORY', 'mv -f $source$delim$constant $target;constant=;');
insert into RELATIONS values('MOVE', '', 'FILE', 'export source;export delim;export constant;export tests;export options=''-maxdepth 1'';export target;echo -e ''files="$(find $source$delim$constant $options $tests)";\nfor f in $files\ndo\nmv -f $f $target\ndone'' 1>command;chmod a+x command;./command;constant=;');
insert into RELATIONS values('LIST', 'TO', 'FILE', 'target=/dev/stdout;');
insert into RELATIONS values('LIST', 'IN', 'DIRECTORY', 'source=.;delim=/;');
insert into RELATIONS values('COPY', 'FROM', 'DIRECTORY', 'source=.;delim=/;');
insert into RELATIONS values('COPY', 'TO', 'DIRECTORY', 'target=.;');
insert into RELATIONS values('REMOVE', 'FROM', 'DIRECTORY', 'source=.;delim=/;');
insert into RELATIONS values('DELETE', 'FROM', 'DIRECTORY', 'source=.;delim=/;');
insert into RELATIONS values('CHANGE', 'TO', 'DIRECTORY', 'source=$constant;');
insert into RELATIONS values('MOVE', 'FROM', 'DIRECTORY', 'source=.;delim=/;');
insert into RELATIONS values('MOVE', 'TO', 'DIRECTORY', 'target=.;');
insert into RELATIONS values('MAKE', 'IN', 'DIRECTORY', 'target=.;delim=/;');
*/
