HOW TO BUILD HI FOR ANDROID (examples with cygwin):

NOTE: This is a recipe for a static linked build of prerequisites to build a shared library for foma.

INSTALL: Android SDK, Android NDK, cygwin (32bit for now)

1) CREATE TOOLCHAIN in cygwin (based on http://www.ikravets.com/computer-life/programming/2014/01/18/an-android-cross-compiling-environment-on-windowsunix-like-systems-using-ndk):

I033768@MUCN30121896A /cygdrive/c/Users/i033768/AppData/Local/Android/android-nd
k-r10e/build/tools:
$ ./make-standalone-toolchain.sh --arch=arm --system=windows-x86_64 --platform=
android-17 --install-dir=/cygdrive/c/Users/i033768/AppData/Local/Android/myandr
oidtoolchain --ndk-dir=/cygdrive/c/Users/i033768/AppData/Local/Android/android-
ndk-r10e/ --llvm-version=3.6 --stl=libc++

Insert the toolchain directory in the PATH env.variable of user bash profile in cygwin:
$ echo "export PATH=\$PATH:/cygdrive/c/Users/i033768/AppData/Local/Android/myandroidtoolchain/bin/" >> ~/.bash_profile


2) BUILD NCURSES-5.9 FOR ARM (based on http://how-to-build-for-arm.wikispaces.com/ncurses):

$ export NCURSES_SRC=~/ncurses-5.9-20150530
$ export NCURSES_BUILD=~/ncurses-5.9-20150530/build
$ mkdir -pv ~/ncurses
$ mkdir $NCURSES_SRC && mkdir $NCURSES_BUILD
$ mkdir ~/ncurses-5.9-20150530/final
$ cd $NCURSES_SRC
$ export TARGETMACH=arm-linux-androideabi
$ export BUILDMACH=i686-pc-cygwin
$ export CROSS=arm-linux-androideabi
$ export CC=${CROSS}-gcc
$ export LD=${CROSS}-ld
$ export AS=${CROSS}-as
$ export CXX=${CROSS}-g++
$ cd $NCURSES_BUILD/
$ $NCURSES_SRC/./configure --prefix=C:/cygwin/home/I033768/ncurses-5.9-20150530/final --host=$TARGETMACH --enable-termcap --with-termlib --without-ada --without-debug --without-progs --without-tests
$ vi include/ncurses_cfg.h -->set HAVE_LOCALE_H to 0
$ make
$ make install

3) BULD READLINE-6.3 FOR ARM:

$ export READLINE_SRC=~/readline-6.3
$ export READLINE_BUILD=~/readline-6.3/build
$ mkdir -pv ~/workbench/readline
$ mkdir $READLINE_SRC && mkdir $READLINE_BUILD
$ mkdir ~/readline-6.3/final
$ cd $READLINE_SRC
$ export TARGETMACH=arm-linux-androideabi
$ export BUILDMACH=i686-pc-cygwin
$ export CROSS=arm-linux-androideabi
$ export CC=${CROSS}-gcc
$ export LD=${CROSS}-ld
$ export AS=${CROSS}-as
$ export CXX=${CROSS}-g++
$ export bash_cv_wcwidth_broken=no
$ export ac_cv_func_malloc_0_nonnull=yes
$ export ac_cv_func_realloc_0_nonnull=yes
$ cd $READLINE_BUILD/
$ $READLINE_SRC/./configure --prefix=C:/cygwin/home/I033768/readline-6.3/final --host=$TARGETMACH LDFLAGS=-LC:/cygwin/home/I033768/ncurses-5.9-20150530/final/lib
$ make
$ make install

4) BUILD ZLIB-1.2.8 FOR ARM (based on http://how-to-build-for-arm.wikispaces.com/zlib):

$ export ZLIB_SRC=~/zlib-1.2.8
$ mkdir -pv ~/zlib-1.2.8
$ mkdir $ZLIB_SRC
$ mkdir ~/zlib-1.2.8/final
$ cd $ZLIB_SRC
$ export TARGETMACH=arm-linux-androideabi
$ export BUILDMACH=i686-pc-cygwin
$ export CROSS=arm-linux-androideabi
$ export CC=${CROSS}-gcc
$ export LD=${CROSS}-ld
$ export AS=${CROSS}-as
$ export CXX=${CROSS}-g++
$ ./configure --prefix=C:/cygwin/home/I033768/zlib-1.2.8/final
$ make
$ make install

5) BUILD FOMA-0.9.17 FOR ARM:

Copy all STATIC (*.a) libraries created as the output of steps 2-4) into a separate library like ~/armlibs

$ mkdir ~/foma-0.9.17/final
$ cd ~/foma-0.9.17

Modify the Makefile in the foma source directory as follows:

prefix = C:/cygwin/home/I033768/foma-0.9.17/final
exec_prefix = $(prefix)
libdir = $(exec_prefix)/lib
bindir = $(exec_prefix)/bin
includedir = $(prefix)/include

VERSION = 0.9.17
CC = arm-linux-androideabi-gcc
RANLIB = arm-linux-androideabi-ranlib
YACC = bison -d -t -v
LEX = flex -8
LEXCLEX = flex -8 --prefix=lexc
LEXIFACE = flex -8 --prefix=interface
LEXCMATRIX = flex -8 --prefix=cmatrix
RM = /bin/rm -f
LDFLAGS = -LC:/cygwin/home/I033768/armlibs -lreadline -lz -lncurses
FLOOKUPLDFLAGS = libfoma.a -lz
CFLAGS = -O3 -Wall -D_GNU_SOURCE -std=c99 -fvisibility=hidden -fPIC -IC:/cygwin/home/I033768/readline-6.3/final/include
FOMAOBJS = foma.o stack.o iface.o lex.interface.o
LIBOBJS = int_stack.o define.o determinize.o apply.o rewrite.o lexcread.o topsort.o flags.o minimize.o reverse.o extract.o sigma.o io.o structures.o constructions.o coaccessible.o utf8.o spelling.o dynarray.o mem.o stringhash.o trie.o lex.lexc.o lex.yy.o lex.cmatrix.o regex.tab.o

all: libfoma foma flookup cgflookup

foma: $(FOMAOBJS) $(LIBOBJS)
	$(CC) $(CFLAGS) $(FOMAOBJS) $(LIBOBJS) $(LDFLAGS) -o $@

flookup: flookup.o libfoma
	$(CC) $(CFLAGS) flookup.o $(FLOOKUPLDFLAGS) -o $@

cgflookup: cgflookup.o libfoma
	$(CC) $(CFLAGS) cgflookup.o $(FLOOKUPLDFLAGS) -o $@

STATICLIB = libfoma.a

UNAME := $(shell uname)

ifeq ($(UNAME), Darwin)
	SHAREDLIB = libfoma.dylib
	SHAREDLIBV = libfoma.$(VERSION).dylib
	SHAREDLIBM = libfoma.0.dylib
	AR = libtool
	ARFLAGS = -static -o
	DFLAG = -dylib_install_name
else 
	SHAREDLIB = libfoma.so
	SHAREDLIBV = libfoma.so
	SHAREDLIBM = libfoma.so
	AR = arm-linux-androideabi-ar
	ARFLAGS = cru
	DFLAG = -soname
endif

ifeq ($(UNAME), SunOS)
	DFLAG = -h
	FLOOKUPLDFLAGS = libfoma.a -lz -lsocket -lnsl
endif

ifeq ($(UNAME), CYGWIN_NT-5.1)
	LDFLAGS = -LC:/cygwin/home/I033768/armlibs
	FLOOKUPLDFLAGS = libfoma.a ../armlibs/libz.a
endif

LIBS = $(SHAREDLIBV) $(STATICLIB)

libfoma: $(SHAREDLIBV)

$(SHAREDLIBV): $(LIBOBJS)
	$(AR) $(ARFLAGS) $(STATICLIB) $(LIBOBJS)
	$(RANLIB) $(STATICLIB)
	$(CC) $(CFLAGS) -shared -o $(SHAREDLIBV) $(LIBOBJS) $(LDFLAGS)

install: foma libfoma
	-@if [ ! -d $(exec_prefix) ]; then mkdir -p $(exec_prefix); fi
	-@if [ ! -d $(includedir)  ]; then mkdir -p $(includedir); fi
	-@if [ ! -d $(libdir)      ]; then mkdir -p $(libdir); fi
	-@if [ ! -d $(bindir)      ]; then mkdir -p $(bindir); fi
	cp fomalib.h fomalibconf.h $(includedir);
	chmod 644 $(includedir)/fomalib.h
	cp foma flookup cgflookup $(bindir)
	cp $(LIBS) $(libdir)
	cd $(libdir); chmod 755 $(LIBS); \
	if test -f $(libdir)/$(SHAREDLIB); then rm  $(libdir)/$(SHAREDLIB); fi
	if test -f $(libdir)/$(SHAREDLIBM); then rm  $(libdir)/$(SHAREDLIBM); fi
	cd $(libdir); cd $(libdir);	\
	(ldconfig || true)		\
	>/dev/null 2>&1; \

$(OBJS): foma.h

.c.o:
	$(CC) $(CFLAGS) -c $< -o $@

lex.yy.c: regex.l regex.tab.h
	$(LEX) regex.l

lex.lexc.c: lexc.l
	$(LEXCLEX) $<

lex.interface.c: interface.l
	$(LEXIFACE) $<

lex.cmatrix.c: cmatrix.l
	$(LEXCMATRIX) $<

regex.tab.c regex.tab.h: regex.y
	$(YACC) $<

clean:
	$(RM) foma flookup cgflookup $(FOMAOBJS) $(LIBOBJS) flookup.o cgflookup.o regex.tab.h regex.tab.c regex.output lex.yy.c lex.lexc.c lex.interface.c lex.cmatrix.c *.so* *.dylib* *.a

After that: make and then make install -> Install may fail but the .so lib gets created without versioning:)

Android project related steps:
1)hilib needs to be created with createlib.sh instead of ndk-build and needs a few includes and libs in place
or correct include/library paths to be set:
includes - android/log.h, sqlite3.h, fomalib.h, fomalibconf.h
libs - libfoma.so, liblog.so, libsqlite.so (the sqlite lib I just copied from the phone directly, didn't build it myself)
2)in the asset folder of the project, the english.fst generated by foma (best bet is to generate it on the phone) and the hi.db must be copied as well
3)in the jni folder of the project I also copied some includes and libs:
includes - sqlite3.h, fomalib.h, fomalibconf.h, hilib.h
libs - libfoma.so, libhilib.so, libsqlite.so

Problems fixed:
Versioned shared libs problem:
modified foma makefile so no versioned shared libraries are generated but now, make install does not put libfoma.so into its installdir but fortunately in the build directory it gets created:)
objdump -p libwhatever.so | grep so
tells if the.so has SONAME dependency in it

__atomic_fetch_sub_4 issue:
to resolve, added -lstdlibc++ -latomic to creatlib.sh script and changed app_stl from c++_static to gnustl_static
